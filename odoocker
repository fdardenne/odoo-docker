#!/usr/bin/env python3
# docker run --network onetwork -p 8070:8069 -e PGHOST=db -e PGUSER=odoo -e PGPASSWORD=odoo -v ~/odoocker/odoo:/home/odoo/src odoo
# docker run --name db --network onetwork -e POSTGRES_PASSWORD=odoo -e POSTGRES_USER=odoo -e POSTGRES_DB=postgres -d postgres
# docker run -d \
#   --name traefik \
#   --network onetwork \
#   -p 80:80 -p 8080:8080 \
#   -v /var/run/docker.sock:/var/run/docker.sock \
#   traefik:v2.11 \
#   --api.insecure=true \
#   --providers.docker \
#   --entrypoints.web.address=:80 \
#   --providers.docker.exposedbydefault=false
import os
import subprocess
import argparse
import shutil
import json
import socket

BASE_PORT = 8070
INSTANCE_DIR = os.path.expanduser("~/odoocker/instances")
COMMUNITY_REPO = os.path.expanduser("~/odoocker/odoo")  # Repo de base cloné
ENTERPRISE_REPO = os.path.expanduser("~/odoocker/enterprise")
PROJECTS_DIR = os.path.expanduser("~/odoocker/projects")

def fetch_branch(repo_path, branch_name):
    remotes = ["origin", "dev"]
    for remote in remotes:
        # Check if branch exists on remote
        result = subprocess.run(
            ["git", "-C", repo_path, "ls-remote", "--heads", remote, branch_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            check=True
        )
        res = result.stdout
        if res.strip():
            print(f"→ Fetching branch '{branch_name}' from remote '{remote}'")
            subprocess.run(["git", "-C", repo_path, "fetch", remote, f"{branch_name}"], check=True)
            return True
    return False

def instanciate_odoo_folder(branch_name, worktree_path):
    fetch_branch(COMMUNITY_REPO, branch_name)
    shutil.copytree(COMMUNITY_REPO, os.path.join(worktree_path, "src", "odoo"), dirs_exist_ok=True)
    subprocess.run(["git", "-C", os.path.join(worktree_path, "src", "odoo"), "checkout", branch_name], check=True)
    if os.path.exists(ENTERPRISE_REPO):
        found = fetch_branch(ENTERPRISE_REPO, branch_name)
        if found:
            shutil.copytree(ENTERPRISE_REPO, os.path.join(worktree_path, "src", "enterprise"), dirs_exist_ok=True)
            subprocess.run(["git", "-C", os.path.join(worktree_path, "src", "enterprise"), "checkout", branch_name], check=True)
        else:
            os.makedirs(os.path.join(worktree_path, "src", "enterprise"), exist_ok=True)

def create_git_worktree(branch_name, worktree_path, detach):
    print(f"→ Create the worktree for the branch '{branch_name}' in '{worktree_path}'")
    subprocess.run(["git", "-C", COMMUNITY_REPO, "worktree", "prune"], check=True)
    fetch_branch(COMMUNITY_REPO, branch_name)
    worktree_cmd = ["git", "-C", COMMUNITY_REPO, "worktree", "add"]
    if detach:
        worktree_cmd.append("--detach")
    worktree_cmd.extend([os.path.join(worktree_path, "src", "odoo"), branch_name])
    subprocess.run(worktree_cmd, check=True)
    if os.path.exists(ENTERPRISE_REPO):
        subprocess.run(["git", "-C", ENTERPRISE_REPO, "worktree", "prune"], check=True)
        found = fetch_branch(ENTERPRISE_REPO, branch_name)
        if found:
            worktree_cmd = ["git", "-C", ENTERPRISE_REPO, "worktree", "add"]
            if detach:
                worktree_cmd.append("--detach")
            worktree_cmd.extend([os.path.join(worktree_path, "src", "enterprise"), branch_name])
            subprocess.run(worktree_cmd, check=True)
        else:
            os.makedirs(os.path.join(worktree_path, "src", "enterprise"), exist_ok=True)

def run_odoo_container(branch_name, project, worktree_path, addons_to_install, debug=False, debug_port=5678):
    container_name = project if project else branch_name
    print(f"→ Running the container {container_name} ({container_name}.localhost)")
    volumes = [
        "-v", f"{worktree_path}/src:/home/odoo/src",
        "-v", f"{worktree_path}/data:/home/odoo/data",
        "-v", f"{os.path.join(INSTANCE_DIR, '../extensions')}:/root/.vscode-server/extensions",
    ]

    if project:
        requirements_path = os.path.join(PROJECTS_DIR, project, "requirements.txt")
        if os.path.exists(requirements_path):
            cmd = 'pip3 install --target /home/odoo/custom -r requirements.txt'
            subprocess.run(cmd, shell=True, check=True)

    subprocess.run([
        "docker", "run", "-d",  "--name", container_name,
        "--network", "onetwork",
        "-p", f"{debug_port}:5678",
        "-e", "PGHOST=db",
        "-e", "PGUSER=odoo",
        "-e", "PGPASSWORD=odoo",
        "-e", f"DB={container_name}",
        *volumes,
        "-l", "traefik.enable=true",
        "-l", f"traefik.http.routers.{container_name}.rule=Host(`{container_name}.localhost`)",
        "-l", f"traefik.http.routers.{container_name}.entrypoints=web",
        "-l", f"traefik.http.services.{container_name}.loadbalancer.server.port=8069",
        "odoo",
        "tail", "-f", "/dev/null"
    ], check=True)
    # cmd = f'yes "" | {worktree_path}/src/odoo/addons/web/tooling/enable.sh'
    # subprocess.run(cmd, shell=True, check=True)
    # I don't like git hooks, feel free to comment the following line if it suits your needs
    # cmd = f"git -C {worktree_path}/src/odoo/ config core.hooksPath ''"
    # subprocess.run(cmd, shell=True, check=True)

    addons_arg = f"-i {addons_to_install}" if addons_to_install else ""
    debugpy_cmd = "debugpy --listen 0.0.0.0:5678 " if debug else ""
    project_addons= "/home/odoo/src/custom," if project else ""
    cmd = [
        "docker", "exec", "-it", container_name,
        "bash", "-c",
        f"{debugpy_cmd}/home/odoo/src/odoo/odoo-bin --dev=all --addons-path={project_addons}/home/odoo/src/enterprise,/home/odoo/src/odoo/addons -d {container_name} {addons_arg}"
    ]
    subprocess.run(cmd, check=True)
    # subprocess.run(["docker", "exec", "-it", container_name, "/home/odoo/src/odoo/odoo-bin", "--dev=all", "-d", container_name, "-i", addons_to_install], check=True)

def container_exists(name):
    """Check if a container with given name is running."""
    result = subprocess.run(
        ["docker", "ps", "-q", "-f", f"name=^{name}$"],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True,
        check=True,
    )
    return bool(result.stdout.strip())

def find_available_port(start_port=5678, max_port=6000):
    # Get all containers with port bindings
    result = subprocess.run(
        ["docker", "ps", "-a", "--format", "{{.ID}}"],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        text=True,
        check=True
    )
    container_ids = result.stdout.strip().splitlines()

    used_ports = set()

    for cid in container_ids:
        inspect = subprocess.run(
            ["docker", "inspect", "--format", "{{json .NetworkSettings.Ports}}", cid],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            check=True
        )
        port_info = inspect.stdout.strip()
        if port_info == "null":
            continue
        try:
            port_map = eval(port_info)  # Or use `json.loads` after replacing `'` with `"` safely
            for key, val in (port_map or {}).items():
                if val:  # If bound
                    for binding in val:
                        host_port = int(binding["HostPort"])
                        used_ports.add(host_port)
        except Exception:
            continue

    # Now find the first free port
    for port in range(start_port, max_port):
        if port not in used_ports:
            return port

    raise RuntimeError("No available port found in range.")

def main():
    parser = argparse.ArgumentParser(description="Run Odoo in a Docker container with a specific branch.")
    parser.add_argument("-v", "--version", type=str, help="Select the odoo and enterprise branch to run (example: 18.0). A worktree of this branch will be created in the instances folder. Define the name if no project is provided.")
    parser.add_argument("-p", "--project", type=str, help="The addons in the folder projects/{project_name} will be mounted. Also define the name of the container.")
    parser.add_argument("-i", "--install", type=str, help="Install the specified addons")
    parser.add_argument("-c", "--connect", action="store_true", help="Connect to the container with the shell")
    parser.add_argument("--debug", action="store_true", help="Run the container in debug mode (with debugpy)")
    parser.add_argument("--code", action="store_true", help="Open vscode to the instances")
    args = parser.parse_args()

    odoo_version = args.version
    project = args.project
    
    container_name = project if project else odoo_version
    worktree_path = os.path.join(INSTANCE_DIR, container_name)
    debug_port = find_available_port()
    if project and not os.path.exists(os.path.join(PROJECTS_DIR, project)):
        os.makedirs(os.path.join(PROJECTS_DIR, project), exist_ok=True)
    if not os.path.exists(worktree_path):
        create_git_worktree(odoo_version, worktree_path, detach=bool(project))
        vscode_src = os.path.join(INSTANCE_DIR, "../.vscode")
        vscode_dst = os.path.join(worktree_path, "src", ".vscode")
        if os.path.exists(vscode_src):
            # Copy the .vscode folder and set the debug url to launch.json
            shutil.copytree(vscode_src, vscode_dst, dirs_exist_ok=True)
            launch_json_path = os.path.join(vscode_dst, "launch.json")
            if os.path.exists(launch_json_path):
                with open(launch_json_path, "r+", encoding="utf-8") as f:
                    data = json.load(f)
                    if "configurations" in data and data["configurations"]:
                        data["configurations"][0].setdefault("connect", {})
                        data["configurations"][0]["connect"]["port"] = debug_port
                    f.seek(0)
                    json.dump(data, f, indent=4)
                    f.truncate()
        if project:
            shutil.copytree(os.path.join(PROJECTS_DIR, project), os.path.join(worktree_path, "src", "custom"), dirs_exist_ok=True)

    if args.code:
        subprocess.run(["code", os.path.join(worktree_path, "src")], check=True)
    if container_exists(container_name):
        if args.connect:
            subprocess.run(["docker", "exec", "-it", container_name, "bash"], check=True)
        else:
            try:
                addons_arg = f"-i {args.install}" if args.install else ""
                debugpy_cmd = "debugpy --listen 0.0.0.0:5678 " if args.debug else ""
                cmd = [
                    "docker", "exec", "-it", container_name,
                    "bash", "-c",
                    f"{debugpy_cmd}/home/odoo/src/odoo/odoo-bin --dev=all --addons-path=/home/odoo/src/custom,/home/odoo/src/enterprise,/home/odoo/src/odoo/addons -d {container_name} {addons_arg}"
                ]
                subprocess.run(cmd, check=True)
            except KeyboardInterrupt:
                print("\nOdoo stopped by user (Ctrl+C).")
    else:
        run_odoo_container(odoo_version, project, worktree_path, args.install, args.debug, debug_port)

if __name__ == "__main__":
    main()
